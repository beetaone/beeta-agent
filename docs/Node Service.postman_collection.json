{
	"info": {
		"_postman_id": "53abd15a-8a16-4bdb-86b3-34fa4bc6309e",
		"name": "Node Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "LATER! User",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Email\": \"managerapi@weeve.network\",\r\n    \"Password\": \"Weeve@01\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/login",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Return the the list of all images registered into the edge server. \n\nTODO LATER: Pagination"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1a4f1ec3-9eb2-4f66-9849-b48fd9be6b31",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0c9bff5e-0274-48ff-89c8-9dbe4ca60e03",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "images",
			"item": [
				{
					"name": "NONEEDimages All",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY0MDI1MDB9.A3eBhfeVODnQLZxWA10vt_P9WIhtLPWHe1l3MDKfllo",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/images",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"images"
							]
						},
						"description": "Return the the list of all images registered into the edge server. \n\nTODO LATER: Pagination"
					},
					"response": []
				},
				{
					"name": "NONEEDimage by ID",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY0MDI1MDB9.A3eBhfeVODnQLZxWA10vt_P9WIhtLPWHe1l3MDKfllo",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/images/{{IMAGE_ID1}}",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"images",
								"{{IMAGE_ID1}}"
							]
						},
						"description": "Get the details for one image.\n\nReturn a JSON with all metadata for an image. \n\n"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f35dcfbd-9204-4f89-8ac0-3f7dfa6a0546",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c25891df-74d2-4b59-a12b-21bfeab68be0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "containers",
			"item": [
				{
					"name": "start",
					"item": [
						{
							"name": "Start all Containers",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY3NDU4NzV9.Qb-Ctp2AX-ruZocQpiDZQQ3tVQbQC-TaHElqJc_nnmE",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{TOKEN}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/containers/start",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"containers",
										"start"
									]
								},
								"description": "Start all stopped containers"
							},
							"response": []
						},
						{
							"name": "Start a single container",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY3NDU4NzV9.Qb-Ctp2AX-ruZocQpiDZQQ3tVQbQC-TaHElqJc_nnmE",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{TOKEN}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/containers/start//containers/start/<containerID>",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"containers",
										"start",
										"",
										"containers",
										"start",
										"<containerID>"
									],
									"query": [
										{
											"key": "id",
											"value": null,
											"disabled": true
										}
									]
								},
								"description": "Start single stopped container by ID"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "stop",
					"item": [
						{
							"name": "Stop all Containers",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY3NDU4NzV9.Qb-Ctp2AX-ruZocQpiDZQQ3tVQbQC-TaHElqJc_nnmE",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{TOKEN}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/containers/stop",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"containers",
										"stop"
									]
								},
								"description": "Stop all started containers"
							},
							"response": []
						},
						{
							"name": "Stop a single container",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY3NDU4NzV9.Qb-Ctp2AX-ruZocQpiDZQQ3tVQbQC-TaHElqJc_nnmE",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{TOKEN}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/containers/start//containers/stop/<containerID>",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"containers",
										"start",
										"",
										"containers",
										"stop",
										"<containerID>"
									],
									"query": [
										{
											"key": "id",
											"value": null,
											"disabled": true
										}
									]
								},
								"description": "Stop single started container by ID"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "deploy",
					"item": [
						{
							"name": "Deploy container",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"Index\": 0,\r\n\t\"Name\": \"nginx_container\",\r\n\t\"Tag\": \"v0\",\r\n\t\"State\":\"stopped\",\r\n\t\"imageID\": \"sha256:fff116a1090b3f824baa406d42feb415284bc0c550964d458e03b0e8613a5fe7\",\r\n\t\"ImageName\": \"nginx\",\r\n\t\"Ingress\":{\r\n\t\t\"Type\": \"Mqtt\",\r\n\t\t\"Port\": \"1883\",\r\n\t\t\"Protocol\": \"MQTT\",\r\n\t\t\"Param1\": \"ingress\"\r\n\t},\r\n\t\"Egress\":{\r\n\t\t\"Type\": \"Mqtt\",\r\n\t\t\"Port\": \"1883\",\r\n\t\t\"Protocol\": \"MQTT\",\r\n\t\t\"Param1\": \"egress\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/containers/deploy",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"containers",
										"deploy"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "logs",
					"item": [
						{
							"name": "Container Logs",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY3NDU4NzV9.Qb-Ctp2AX-ruZocQpiDZQQ3tVQbQC-TaHElqJc_nnmE",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/containers/{{CONTAINER_ID}}/logs?stream=error",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"containers",
										"{{CONTAINER_ID}}",
										"logs"
									],
									"query": [
										{
											"key": "stream",
											"value": "error"
										}
									]
								},
								"description": "Return the the list of all images registered into the edge server. \n\nTODO LATER: Pagination"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Containers All",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOjEyMzQsIk5hbWUiOiJUZXN0IiwiRW1haWwiOiJtYW5hZ2VyYXBpQHdlZXZlLm5ldHdvcmsiLCJleHAiOjE2MDY3NDU4NzV9.Qb-Ctp2AX-ruZocQpiDZQQ3tVQbQC-TaHElqJc_nnmE",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/containers",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"containers"
							]
						},
						"description": "Return the the list of all images registered into the edge server. \n\nTODO LATER: Pagination"
					},
					"response": []
				},
				{
					"name": "[TODO] ECR Direct - images All",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "QVdTOmV5SndZWGxzYjJGa0lqb2lVMHA2Y3pab1QzTXlWM1kyY0RneFVscHRVSFo2VkhKQlMwbGpaM2syVTJOUlYwVmtWM1phZG5KR00yMWpjemRtZWtacmNURldOalowZHpBMGNuTmxSbmw1VDFGS2JWRlpWMnN5TjNsa1ZraEtTVE5zVmxKcVJWQmxSbkZvZEdzdmNXRlNlRm92TkVaRlpqQmpPWGhHV1N0VmNFd3lZemxRUVZObWFrcE5RM3B5VWs5RWNXTkpiU3RaVFRWUGRHaFpiV2N2YUdsQlZrWXhiRVZUWW1aRGIxa3dMM0ZCUlU5M2FsaHBMMmhWU2tKSmNFbERUMHRqY2xGWGFVUlNRek5VU0ZsWFpuUXdTbTFDY25FMk1rbHBZMnRMYzNwUU9YTnJXRTlhUlRCNGJYSmhNMlZFS3l0bmVXOTRZbEptYnpKWE1rWnBhbnBDYWxSbVlUbFViV2RZV2pRNE5ua3lhMW95UWp",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://772697371069.dkr.ecr.us-east-2.amazonaws.com/v1.41/images/json",
							"protocol": "http",
							"host": [
								"772697371069",
								"dkr",
								"ecr",
								"us-east-2",
								"amazonaws",
								"com"
							],
							"path": [
								"v1.41",
								"images",
								"json"
							]
						},
						"description": "Return the the list of all images registered into the edge server. \n\nTODO LATER: Pagination"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "71117377-a74b-4e02-bf02-8da10fcc2466",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a7b65206-410f-4a1a-b61d-613f0ec2119d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "pipelines",
			"item": [
				{
					"name": "OLD",
					"item": [
						{
							"name": "pipeline WITH SIMPLE MANIFEST",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"manifest\":\"manifest test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Create Manifest and create containers in remote docker."
							},
							"response": []
						},
						{
							"name": "pipeline with REAL MANIFEST",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ID\": \"asdfasdfjk\",\n\t\"Name\": \"Manifest1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"pipelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "pipeline with SINGLE STRING",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ID\": \"asdfasdfjk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/pipeline",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"pipeline"
									]
								}
							},
							"response": []
						},
						{
							"name": "{{EDGE_PIPELINE_URL}}/pipeline",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/pipeline",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"pipeline"
									]
								}
							},
							"response": []
						},
						{
							"name": "pipelines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7104b116-5fc0-47c0-9ff0-f877fafeb19b",
										"exec": [
											"console.log('Pre-request')",
											"",
											"",
											"const manifests = {",
											"    \"manifest1\": {",
											"        \"Name\":\"manifest test\"",
											"    },",
											"    \"manifest2\": {",
											"\t\"Name\": \"Manifest1\",",
											"\t\"Modules\": [{",
											"\t\t\"Index\": 0,",
											"\t\t\"Name\": \"orchestration_initial_listener\",",
											"\t\t\"Tag\": \"latest\",",
											"\t\t\"ImageID\": \"sha256:02103b943cd1b325f9035f8df1222ab8da6a6dba16152455c3252ebd964bad03\",",
											"\t\t\"ImageName\": \"initial_listener\",",
											"\t\t\"Ingress\": {",
											"\t\t\t\"Type\": \"mqtt\",",
											"\t\t\t\"Protocol\": \"tcp\",",
											"\t\t\t\"Broker\": \"tcp://localhost:1883\",",
											"\t\t\t\"Topic\": \"topic/globalinput\"",
											"\t\t},",
											"\t\t\"Egress\": {",
											"\t\t\t\"Type\": \"mqtt\",",
											"\t\t\t\"Protocol\": \"tcp\",",
											"\t\t\t\"Broker\": \"tcp://localhost:1883\",",
											"\t\t\t\"Topic\": \"topic/output1\"",
											"\t\t}",
											"\t}, {",
											"\t\t\"Index\": 1,",
											"\t\t\"Name\": \"orchestration_final_average_api\",",
											"\t\t\"Tag\": \"latest\",",
											"\t\t\"ImageID\": \"sha256:95102f8c9e977a6b40c41cd6c813764d2ee336c44c07ae7305c192c1f1389e28\",",
											"\t\t\"ImageName\": \"final_average_api\",",
											"\t\t\"Ingress\": {",
											"\t\t\t\"Type\": \"mqtt\",",
											"\t\t\t\"Protocol\": \"tcp\",",
											"\t\t\t\"Broker\": \"tcp://localhost:1883\",",
											"\t\t\t\"Topic\": \"topic/output1\"",
											"\t\t},",
											"\t\t\"Egress\": {",
											"\t\t\t\"Type\": \"mqtt\",",
											"\t\t\t\"Protocol\": \"tcp\",",
											"\t\t\t\"Broker\": \"tcp://localhost:1883\",",
											"\t\t\t\"Topic\": \"topic/globaloutput\"",
											"\t\t}",
											"\t}]",
											"}",
											"}",
											"",
											"console.log(`Found ${Object.keys(manifests).length} test manifest files:`)",
											"for(var mani in manifests){",
											"    console.log(`\\t${mani}: ` + manifests[mani])",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"pipelines"
									]
								},
								"description": "Create Manifest and create containers in remote docker."
							},
							"response": [
								{
									"name": "pipelines empty",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{EDGE_PIPELINE_URL}}/pipeline",
											"host": [
												"{{EDGE_PIPELINE_URL}}"
											],
											"path": [
												"pipeline"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": [],
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "pipelines - 1 container",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ID\":\"1\",\r\n    \"Name\":\"Test\",\r\n    \"Modules\": [\r\n        {\r\n            \"Index\": 0,\r\n            \"Name\": \"postgres_container\",\r\n            \"Tag\": \"v0\",\r\n            \"imageID\": \"sha256:fff116a1090b3f824baa406d42feb415284bc0c550964d458e03b0e8613a5fe7\",\r\n            \"ImageName\": \"postgres\",\r\n            \"Ingress\":{\r\n                \"Type\": \"Mqtt\",\r\n                \"Port\": \"1883\",\r\n                \"Protocol\": \"MQTT\",\r\n                \"Param1\": \"ingress\"\r\n            },\r\n            \"Egress\":{\r\n                \"Type\": \"Mqtt\",\r\n                \"Port\": \"1883\",\r\n                \"Protocol\": \"MQTT\",\r\n                \"Param1\": \"egress\"\r\n            }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"pipelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "pipelines - 3 containers",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ID\":\"1\",\r\n    \"Name\":\"Test\",\r\n    \"Modules\": [\r\n        {\r\n            \"Index\": 0,\r\n            \"Name\": \"postgres_container\",\r\n            \"Tag\": \"v0\",\r\n            \"imageID\": \"sha256:fff116a1090b3f824baa406d42feb415284bc0c550964d458e03b0e8613a5fe7\",\r\n            \"ImageName\": \"postgres\",\r\n            \"Ingress\":{\r\n                \"Type\": \"Mqtt\",\r\n                \"Port\": \"1883\",\r\n                \"Protocol\": \"MQTT\",\r\n                \"Param1\": \"ingress\"\r\n            },\r\n            \"Egress\":{\r\n                \"Type\": \"Mqtt\",\r\n                \"Port\": \"1883\",\r\n                \"Protocol\": \"MQTT\",\r\n                \"Param1\": \"egress\"\r\n            }\r\n        },\r\n        {\r\n            \"Index\": 1,\r\n            \"Name\": \"redis_container\",\r\n            \"Tag\": \"v0\",\r\n            \"imageID\": \"sha256:fff116a1090b3f824baa406d42feb415284bc0c550964d458e03b0e8613a5fe7\",\r\n            \"ImageName\": \"redis\",\r\n            \"Ingress\":{\r\n                \"Type\": \"Mqtt\",\r\n                \"Port\": \"1883\",\r\n                \"Protocol\": \"MQTT\",\r\n                \"Param1\": \"ingress\"\r\n            },\r\n            \"Egress\":{\r\n                \"Type\": \"Mqtt\",\r\n                \"Port\": \"1883\",\r\n                \"Protocol\": \"MQTT\",\r\n                \"Param1\": \"egress\"\r\n            }\r\n        }        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
									"host": [
										"{{EDGE_PIPELINE_URL}}"
									],
									"path": [
										"pipelines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "pipeline Basic manifest",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ID\":\"manifest2\",\n\t\"Name\": \"ManifestSingleContainerWithParameters\",\n\t\"Modules\": [\n    {\n\t\t\"Index\": 0,\n\t\t\"Name\": \"c1\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            {\"opt\":\"network\", \"val\":\"host\"}\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 1,\n\t\t\"Name\": \"c2\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            {\"opt\":\"network\", \"val\":\"host\"}\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "pipeline 3mqtt 1broker",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ID\":\"manifest-demo\",\n\t\"Name\": \"ManifestSingleContainerWithParameters\",\n\t\"Modules\": [\n    {\n\t\t\"Index\": 0,\n\t\t\"Name\": \"c1\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            {\"opt\":\"network\", \"val\":\"host\"}\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"0.0.0.0:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"0.0.0.0:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 1,\n\t\t\"Name\": \"c2\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            {\"opt\":\"network\", \"val\":\"host\"}\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 2,\n\t\t\"Name\": \"c3\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            {\"opt\":\"network\", \"val\":\"host\"}\n                   ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 3,\n\t\t\"Name\": \"broker\",\n\t\t\"Tag\": \"latest\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"eclipse-mosquitto\",\n        \"options\": [\n            {\"opt\":\"ExposedPorts\", \"val\":\"1883/tcp\"},\n            {\"opt\":\"HostIP\", \"val\":\"0.0.0.0\"},\n            {\"opt\":\"HostPort\", \"val\":\"1883\"}\n            ],\n        \"arguments\": [  ]\n\t}    \n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "pipeline 3mqtt 1broker Network",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ID\":\"manifest-demo\",\n\t\"Name\": \"ManifestSingleContainerWithParameters\",\n\t\"Modules\": [\n            {\n\t\t\"Index\": 3,\n\t\t\"Name\": \"broker\",\n\t\t\"Tag\": \"latest\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"eclipse-mosquitto\",\n        \"options\": [\n            {\"opt\":\"ExposedPorts\", \"val\":\"1883/tcp\"},\n            {\"opt\":\"HostIP\", \"val\":\"0.0.0.0\"},\n            {\"opt\":\"HostPort\", \"val\":\"1883\"}\n            ],\n        \"arguments\": [  ]\n\t},\n    {\n\t\t\"Index\": 0,\n\t\t\"Name\": \"c1\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"172.30.0.2:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"172.30.0.2:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 1,\n\t\t\"Name\": \"c2\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"manifest-demo_broker:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"manifest-demo_broker:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 2,\n\t\t\"Name\": \"c3\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n                   ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"manifest-demo_broker:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"manifest-demo_broker:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "pipeline 3mqtt 1broker Network2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ID\":\"manifest-demo\",\n\t\"Name\": \"ManifestSingleContainerWithParameters\",\n\t\"Modules\": [\n    {\n\t\t\"Index\": 0,\n\t\t\"Name\": \"c1\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"0.0.0.0:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"0.0.0.0:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 1,\n\t\t\"Name\": \"c2\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n            ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"localhost:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t},\n    {\n\t\t\"Index\": 2,\n\t\t\"Name\": \"c3\",\n\t\t\"Tag\": \"working\",\n\t\t\"ImageID\": \"sha256:a99a6700a30478ce4af059543a0aaac139eea3c85ff62b2603c9d53b4cc42657\",\n\t\t\"ImageName\": \"weevenetwork/go-mqtt-gobot\",\n        \"options\": [\n                   ],\n        \"arguments\": [\n            {\"arg\":\"InBroker\", \"val\":\"broker:1883\"},\n            {\"arg\":\"ProcessName\", \"val\":\"container-1\"},\n            {\"arg\":\"InTopic\", \"val\":\"topic/source\"},\n            {\"arg\":\"InClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"},\n            {\"arg\":\"OutBroker\", \"val\":\"broker:1883\"},\n            {\"arg\":\"OutTopic\", \"val\":\"topic/c2\"},\n            {\"arg\":\"OutClient\", \"val\":\"weevenetwork/go-mqtt-gobot\"}\n        ]\n\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/pipelines",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "LATER! Manifest",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "JWT Token",
								"key": "Authorization",
								"type": "text",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "{{EDGE_PIPELINE_URL}}/manifests",
							"host": [
								"{{EDGE_PIPELINE_URL}}"
							],
							"path": [
								"manifests"
							]
						},
						"description": "Get Manifest for the Pipeline Service."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "188918ed-f446-4e8b-8173-086c3e7e8b8c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "28325d49-6894-4ee5-bd5c-b9fa2f8c5f5d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "/ (status)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a42a86bb-caa8-4020-b0a7-48cfe9261a8e",
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"location\": {\"type\":\"string\"},",
							"        \"name\":  {\"type\":\"string\"},",
							"        \"status\":  {\"type\":\"string\"},",
							"        \"version\":  {\"type\":\"string\"}",
							"    },",
							"    \"required\": [\"location\", \"name\", \"status\", \"version\"]",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validate schema\", () => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{EDGE_PIPELINE_URL}}",
					"host": [
						"{{EDGE_PIPELINE_URL}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "04c4c633-54ba-4702-9d1b-fbb4fbcef79e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2c3fdaaa-2cfc-4182-94d9-32e1e9dc48cb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "543e7016-9da1-48bc-bd34-e2544f294b49",
			"key": "IMAGE_ID1",
			"value": "sha256:bd571e6529f32461648680c82e2540f9db4b3bb92709ae5d19dd347531c98f19"
		},
		{
			"id": "49607ee0-1c2c-43a4-a6b7-46705e65947c",
			"key": "IMAGE_ID2",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}